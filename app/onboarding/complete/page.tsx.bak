'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { TopNavigation } from '@/components/ui/top-navigation';
import { Button } from '@/components/ui/button';
import { BoltBadge } from '@/components/layout/bolt-badge';

interface Phrase {
  text: string;
  duration: number; // in milliseconds
}

const phrases: Phrase[] = [
  {
    text: "Perfect! We've received all your life balance data...",
    duration: 3000
  },
  {
    text: "Building your personalized Circle of Trust...",
    duration: 3500
  },
  {
    text: "Matching you with AI companions who truly get you...",
    duration: 3500
  },
  {
    text: "Almost ready... preparing your support network...",
    duration: 3000
  },
  {
    text: "Welcome to BELANCE! Time to meet your Circle of Trust.",
    duration: 2000
  }
];

// Total duration is exactly 15 seconds (15000ms)
const totalDuration = phrases.reduce((sum, phrase) => sum + phrase.duration, 0);

export default function OnboardingCompletePage() {
  const router = useRouter();
  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);
  const [showPhrase, setShowPhrase] = useState(false);
  const [progress, setProgress] = useState(0);
  const [isComplete, setIsComplete] = useState(false);
  const [showContinueButton, setShowContinueButton] = useState(false);
  const [isSkipped, setIsSkipped] = useState(false);

  // Skip function - redirects immediately to dashboard
  const handleSkip = () => {
    console.log('🚀 Skipping onboarding completion, redirecting to dashboard...');
    setIsSkipped(true);
    router.push('/?tab=dashboard');
  };

  // Initial setup effect - handles start delay, continue button, and auto-redirect
  useEffect(() => {
    if (isSkipped) return;

    const startDelay: number = window.setTimeout(() => {
      if (!isSkipped) {
        setShowPhrase(true);
      }
    }, 500);

    const continueButtonTimer: number = window.setTimeout(() => {
      if (!isSkipped) {
        setShowContinueButton(true);
      }
    }, 5000);

    const redirectTimer: number = window.setTimeout(() => {
      if (!isSkipped) {
        console.log('⏰ Auto-redirecting to dashboard after 15 seconds...');
        router.push('/?tab=dashboard');
      }
    }, 15000);

    return () => {
      clearTimeout(startDelay);
      clearTimeout(continueButtonTimer);
      clearTimeout(redirectTimer);
    };
  }, [router, isSkipped]);

  // Handle phrase transitions
  useEffect(() => {
    if (isSkipped || currentPhraseIndex >= phrases.length) {
      if (currentPhraseIndex >= phrases.length) {
        setIsComplete(true);
      }
      return;
    }

    const currentPhrase = phrases[currentPhraseIndex];
    
    // Show the current phrase
    setShowPhrase(true);

    // Declare nextPhraseTimer with explicit typing
    let nextPhraseTimer: number | null = null;

    // Set up the transition to next phrase
    const phraseTimer: number = window.setTimeout(() => {
      if (!isSkipped) {
        // Fade out current phrase
        setShowPhrase(false);
        
        // After fade out, move to next phrase
        nextPhraseTimer = window.setTimeout(() => {
          if (!isSkipped) {
            setCurrentPhraseIndex(prev => prev + 1);
          }
        }, 500); // 500ms for fade out transition
      }
    }, currentPhrase.duration - 500); // Start fade out 500ms before phrase ends

    return () => {
      clearTimeout(phraseTimer);
      if (nextPhraseTimer !== null) {
        clearTimeout(nextPhraseTimer);
      }
    };
  }, [currentPhraseIndex, isSkipped]);

  // Handle progress bar animation
  useEffect(() => {
    if (isSkipped) return;

    const progressTimer: number = window.setInterval(() => {
      setProgress(prev => {
        const newProgress = prev + (100 / (totalDuration / 50)); // Update every 50ms
        return Math.min(newProgress, 100);
      });
    }, 50);

    return () => {
      clearInterval(progressTimer);
    };
  }, [isSkipped]);

  const currentPhrase = phrases[currentPhraseIndex];

  return (
    <>
      <div 
        className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden cursor-pointer"
        onClick={handleSkip}
      >
        {/* ✅ CONSISTENT TOP NAVIGATION */}
        <TopNavigation 
          title="Onboarding"
          subtitle="Completing your setup"
          showProfileIcon={false}
        />

        {/* Progress Bar */}
        <div className="absolute top-[72px] left-0 right-0 z-10">
          <div className="w-full h-1 bg-white/10">
            <div 
              className="h-full bg-gradient-to-r from-purple-500 to-pink-500 transition-all duration-75 ease-linear"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>

        {/* Main Content */}
        <div className="flex flex-col items-center justify-center min-h-screen px-6 text-center pt-20">
          {/* BELANCE Logo */}
          <div className="mb-16">
            <div className="w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-purple-500 via-pink-500 to-orange-500 rounded-2xl flex items-center justify-center shadow-2xl">
              <div className="text-white font-bold text-2xl">BE</div>
            </div>
            
            <h1 className="text-3xl font-bold text-white tracking-tight">
              <span className="bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                BELANCE
              </span>
            </h1>
          </div>

          {/* Phrase Display */}
          <div className="max-w-2xl mx-auto mb-12">
            {currentPhrase && (
              <div
                className={`transition-opacity duration-500 ease-in-out ${
                  showPhrase ? 'opacity-100' : 'opacity-0'
                }`}
              >
                <p className="text-2xl md:text-3xl font-semibold text-white leading-relaxed">
                  {currentPhrase.text}
                </p>
              </div>
            )}
          </div>

          {/* Animated Loading Dots */}
          <div className="flex items-center justify-center space-x-2 mb-8">
            <div className="w-3 h-3 bg-purple-400 rounded-full animate-pulse"></div>
            <div className="w-3 h-3 bg-pink-400 rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
            <div className="w-3 h-3 bg-orange-400 rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
          </div>

          {/* Continue Button - Appears after 5 seconds */}
          {showContinueButton && (
            <div className="mb-8 animate-fade-in">
              <Button
                onClick={handleSkip}
                className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold px-8 py-3 rounded-xl shadow-lg transition-all duration-300 hover:scale-105"
              >
                Continue to Dashboard →
              </Button>
            </div>
          )}

          {/* Progress Indicator */}
          <div className="text-white/60 text-sm">
            Step {Math.min(currentPhraseIndex + 1, phrases.length)} of {phrases.length}
          </div>

          {/* Skip Instruction */}
          <div className="mt-4 text-white/40 text-xs">
            Click anywhere to skip
          </div>
        </div>

        {/* Background Decorative Elements */}
        <div className="absolute inset-0 pointer-events-none">
          <div className="absolute top-20 left-8 w-2 h-2 bg-white/10 rounded-full animate-pulse"></div>
          <div className="absolute top-40 right-12 w-1 h-1 bg-purple-400/20 rounded-full animate-pulse" style={{ animationDelay: '1s' }}></div>
          <div className="absolute bottom-32 left-16 w-1 h-1 bg-pink-400/15 rounded-full animate-pulse" style={{ animationDelay: '2s' }}></div>
          <div className="absolute top-60 left-1/3 w-0.5 h-0.5 bg-white/5 rounded-full animate-pulse" style={{ animationDelay: '0.5s' }}></div>
          <div className="absolute bottom-40 right-1/4 w-2 h-2 bg-purple-300/10 rounded-full animate-pulse" style={{ animationDelay: '1.5s' }}></div>
        </div>
      </div>
      
      {/* ✅ Fixed positioned Bolt Badge for onboarding completion */}
      <BoltBadge fixedPosition={true} />
    </>
  );
}
